const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    const gcrypt_lib = gcrypt_lib_blk: {
        const config_h = configureHeader(b, target, optimize);

        const lib = b.addStaticLibrary(.{
            .name = "gcrypt",
            .target = target,
            .optimize = optimize,
        });

        lib.root_module.addConfigHeader(config_h);
        lib.root_module.addCSourceFiles(.{
            .root = b.path("upstream/src"),
            .files = &.{
                "visibility.c",
                "misc.c",
                "global.c",
                "sexp.c",
                "hwfeatures.c",
                "stdmem.c",
                "secmem.c",
                "missing-string.c",
                "fips.c",
                "context.c",
                "const-time.c",
            },
            .flags = &.{
                "-std=c99",
            },
        });

        lib.root_module.link_libc = true;

        break :gcrypt_lib_blk lib;
    };
    b.installArtifact(gcrypt_lib);
}

fn configureHeader(b: *std.Build, target: std.Build.ResolvedTarget, optimize: std.builtin.OptimizeMode) *std.Build.Step.ConfigHeader {
    _ = optimize; // autofix
    const cfgBool = struct {
        fn cfgBool(x: bool) ?isize {
            return if (x) 1 else null;
        }
    }.cfgBool;

    const t = target.result;

    const cpu = t.cpu;
    const os = t.os;

    const package_name = "libgcrypt";
    const package_version = "1.11.1-beta12";

    return b.addConfigHeader(.{ .style = .{ .autoconf = b.path("config.h.in") } }, .{
        .GPG_ERR_ENABLE_ERRNO_MACROS = null,
        .GPG_ERR_SOURCE_DEFAULT = null,

        .AC_APPLE_UNIVERSAL_BUILD = null,
        .ASM_DISABLED = null,

        .BUILD_REVISION = "0",
        .BUILD_TIMESTAMP = "<none>",

        .DISABLED_ENDIAN_CHECK = null,

        .EGD_SOCKET_NAME = "",

        .ENABLE_AESNI_SUPPORT = cfgBool(cpu.arch.isX86()),
        .ENABLE_ARM_CRYPTO_SUPPORT = cfgBool(cpu.arch.isAARCH64()),
        .ENABLE_AVX2_SUPPORT = cfgBool(cpu.arch.isX86()),
        .ENABLE_AVX512_SUPPORT = cfgBool(cpu.arch.isX86()),
        .ENABLE_AVX_SUPPORT = cfgBool(cpu.arch.isX86()),
        .ENABLE_DRNG_SUPPORT = cfgBool(cpu.arch.isX86()),
        .ENABLE_GFNI_SUPPORT = cfgBool(cpu.arch.isX86()),
        .ENABLE_HMAC_BINARY_CHECK = null,
        .ENABLE_NEON_SUPPORT = cfgBool(cpu.arch.isAARCH64()),
        .ENABLE_PCLMUL_SUPPORT = cfgBool(cpu.arch.isX86()),
        .ENABLE_PPC_CRYPTO_SUPPORT = cfgBool(false),
        .ENABLE_SHAEXT_SUPPORT = cfgBool(cpu.arch.isX86()),
        .ENABLE_FORCE_SOFT_HWFEATURES = null,
        .ENABLE_SSE41_SUPPORT = cfgBool(cpu.arch.isX86()),
        .ENABLE_SVE2_SUPPORT = cfgBool(cpu.arch.isAARCH64()),
        .ENABLE_SVE_SUPPORT = cfgBool(cpu.arch.isAARCH64()),
        .HAVE_ARM_ARCH_V6 = cfgBool(cpu.arch.isAARCH64()),

        .ENABLE_JENT_SUPPORT = cfgBool(true),
        .ENABLE_PADLOCK_SUPPORT = cfgBool(true),

        .FIPS_MODULE_VERSION = "",
        .GCRY_USE_VISIBILITY = cfgBool(true),

        .HAVE_ATEXIT = cfgBool(true),
        .HAVE_BROKEN_MLOCK = cfgBool(false),
        .HAVE_BUILTIN_BSWAP32 = cfgBool(true),
        .HAVE_BUILTIN_BSWAP64 = cfgBool(true),
        .HAVE_BUILTIN_CLZ = cfgBool(true),
        .HAVE_BUILTIN_CLZL = cfgBool(true),
        .HAVE_BUILTIN_CTZ = cfgBool(true),
        .HAVE_BUILTIN_CTZL = cfgBool(true),
        .HAVE_BYTE = cfgBool(false),
        .HAVE_CLANG_ATTRIBUTE_PPC_TARGET = cfgBool(false),
        .HAVE_CLOCK = cfgBool(true),
        .HAVE_CLOCK_GETTIME = cfgBool(true),
        .HAVE_COMPATIBLE_CC_AARCH64_NEON_INTRINSICS = cfgBool(cpu.arch.isAARCH64()),
        .HAVE_COMPATIBLE_CC_AARCH64_NEON_INTRINSICS_WITH_CFLAGS = cfgBool(false),
        .HAVE_COMPATIBLE_CC_PPC_ALTIVEC = cfgBool(false),
        .HAVE_COMPATIBLE_CC_PPC_ALTIVEC_WITH_CFLAGS = cfgBool(false),
        .HAVE_COMPATIBLE_CC_X86_AVX512_INTRINSICS = cfgBool(cpu.arch.isX86()),
        .HAVE_COMPATIBLE_GCC_AARCH64_PLATFORM_AS = cfgBool(cpu.arch.isAARCH64()),
        .HAVE_COMPATIBLE_GCC_AMD64_PLATFORM_AS = cfgBool(cpu.arch == .x86_64),
        .HAVE_COMPATIBLE_GCC_ARM_PLATFORM_AS = cfgBool(false),
        .HAVE_COMPATIBLE_GCC_I386_PLATFORM_AS = cfgBool(cpu.arch == .x86),
        .HAVE_COMPATIBLE_GCC_WIN32_PLATFORM_AS = cfgBool(os.tag == .windows and cpu.arch == .x86),
        .HAVE_COMPATIBLE_GCC_WIN64_PLATFORM_AS = cfgBool(os.tag == .windows and cpu.arch == .x86_64),

        .HAVE_CPU_ARCH_ALPHA = cfgBool(false),
        .HAVE_CPU_ARCH_ARM = cfgBool(cpu.arch.isAARCH64()),
        .HAVE_CPU_ARCH_M68K = cfgBool(false),
        .HAVE_CPU_ARCH_MIPS = cfgBool(false),
        .HAVE_CPU_ARCH_PPC = cfgBool(false),
        .HAVE_CPU_ARCH_S390X = cfgBool(false),
        .HAVE_CPU_ARCH_SPARC = cfgBool(false),
        .HAVE_CPU_ARCH_X86 = cfgBool(cpu.arch.isX86()),

        .HAVE_DEV_RANDOM = cfgBool(true),
        .HAVE_DLFCN_H = cfgBool(os.tag == .linux),
        .HAVE_DOPRNT = cfgBool(false),
        .HAVE_DOSISH_SYSTEM = cfgBool(os.tag == .windows),
        .HAVE_DRIVE_LETTERS = cfgBool(os.tag == .windows),
        .HAVE_ELF_AUX_INFO = cfgBool(false),
        .HAVE_EXPLICIT_BZERO = cfgBool(os.tag == .linux),
        .HAVE_EXPLICIT_MEMSET = cfgBool(false),

        .HAVE_FCNTL = cfgBool(os.tag == .linux),
        .HAVE_FLOCKFILE = cfgBool(os.tag == .linux),
        .HAVE_FTRUNCATE = cfgBool(os.tag == .linux),

        .HAVE_GCC_ASM_CFI_DIRECTIVES = cfgBool(true),
        .HAVE_GCC_ASM_ELF_DIRECTIVES = cfgBool(true),
        .HAVE_GCC_ASM_VOLATILE_MEMORY = cfgBool(true),
        .HAVE_GCC_ATTRIBUTE_ALIGNED = cfgBool(true),
        .HAVE_GCC_ATTRIBUTE_MAY_ALIAS = cfgBool(true),
        .HAVE_GCC_ATTRIBUTE_MS_ABI = cfgBool(true),
        .HAVE_GCC_ATTRIBUTE_OPTIMIZE = cfgBool(true),
        .HAVE_GCC_ATTRIBUTE_PACKED = cfgBool(true),
        .HAVE_GCC_ATTRIBUTE_PPC_TARGET = cfgBool(false),
        .HAVE_GCC_ATTRIBUTE_SYSV_ABI = cfgBool(true),
        .HAVE_GCC_DEFAULT_ABI_IS_MS_ABI = cfgBool(false),
        .HAVE_GCC_DEFAULT_ABI_IS_SYSV_ABI = cfgBool(cpu.arch.isX86() and os.tag == .linux),
        .HAVE_GCC_INLINE_ASM_AARCH32_CRYPTO = cfgBool(cpu.arch.isARM()),
        .HAVE_GCC_INLINE_ASM_AARCH64_CRYPTO = cfgBool(cpu.arch.isAARCH64()),
        .HAVE_GCC_INLINE_ASM_AARCH64_NEON = cfgBool(cpu.arch.isAARCH64()),
        .HAVE_GCC_INLINE_ASM_AARCH64_SHA3_SHA512_SM3_SM4 = cfgBool(cpu.arch.isAARCH64()),
        .HAVE_GCC_INLINE_ASM_AARCH64_SVE = cfgBool(cpu.arch.isAARCH64()),
        .HAVE_GCC_INLINE_ASM_AARCH64_SVE2 = cfgBool(cpu.arch.isAARCH64()),
        .HAVE_GCC_INLINE_ASM_AVX = cfgBool(cpu.arch.isX86()),
        .HAVE_GCC_INLINE_ASM_AVX2 = cfgBool(cpu.arch.isX86()),
        .HAVE_GCC_INLINE_ASM_AVX512 = cfgBool(cpu.arch.isX86()),
        .HAVE_GCC_INLINE_ASM_BMI2 = cfgBool(cpu.arch.isX86()),
        .HAVE_GCC_INLINE_ASM_GFNI = cfgBool(cpu.arch.isX86()),
        .HAVE_GCC_INLINE_ASM_NEON = cfgBool(cpu.arch.isAARCH64()),
        .HAVE_GCC_INLINE_ASM_PCLMUL = cfgBool(cpu.arch.isX86()),
        .HAVE_GCC_INLINE_ASM_PPC_ALTIVEC = cfgBool(false),
        .HAVE_GCC_INLINE_ASM_PPC_ARCH_3_00 = cfgBool(false),
        .HAVE_GCC_INLINE_ASM_S390X = cfgBool(false),
        .HAVE_GCC_INLINE_ASM_S390X_VX = cfgBool(false),
        .HAVE_GCC_INLINE_ASM_SHAEXT = cfgBool(cpu.arch.isX86()),
        .HAVE_GCC_INLINE_ASM_SSE41 = cfgBool(cpu.arch.isX86()),
        .HAVE_GCC_INLINE_ASM_SSSE3 = cfgBool(cpu.arch.isX86()),
        .HAVE_GCC_INLINE_ASM_VAES_VPCLMUL = cfgBool(cpu.arch.isX86()),

        .HAVE_GETAUXVAL = cfgBool(true),
        .HAVE_GETENTROPY = cfgBool(true),
        .HAVE_GETHRTIME = cfgBool(false),
        .HAVE_GETPAGESIZE = cfgBool(true),
        .HAVE_GETPID = cfgBool(true),
        .HAVE_GETRUSAGE = cfgBool(true),
        .HAVE_GETTIMEOFDAY = cfgBool(true),
        .HAVE_INTEL_SYNTAX_PLATFORM_AS = cfgBool(true),
        .HAVE_INTTYPES_H = cfgBool(true),
        .HAVE_LIBRT = cfgBool(false),
        .HAVE_MEMMOVE = cfgBool(true),
        .HAVE_MINIX_CONFIG_H = cfgBool(false),
        .HAVE_MLOCK = cfgBool(true),
        .HAVE_MMAP = cfgBool(true),
        .HAVE_PTHREAD = cfgBool(true),
        .HAVE_RAISE = cfgBool(true),
        .HAVE_RAND = cfgBool(true),
        .HAVE_SPAWN_H = cfgBool(false),
        .HAVE_STDINT_H = cfgBool(true),
        .HAVE_STDIO_H = cfgBool(true),
        .HAVE_STDLIB_H = cfgBool(true),
        .HAVE_STPCPY = cfgBool(true),
        .HAVE_STRCASECMP = cfgBool(true),
        .HAVE_STRERROR = cfgBool(true),
        .HAVE_STRICMP = cfgBool(false),
        .HAVE_STRINGS_H = cfgBool(true),
        .HAVE_STRING_H = cfgBool(true),
        .HAVE_STRTOUL = cfgBool(true),
        .HAVE_SYNC_SYNCHRONIZE = cfgBool(true),
        .HAVE_SYSCALL = cfgBool(true),
        .HAVE_SYSCONF = cfgBool(true),
        .HAVE_SYSCTLBYNAME = cfgBool(false),
        .HAVE_SYSLOG = cfgBool(true),
        .HAVE_SYS_AUXV_H = cfgBool(true),
        .HAVE_SYS_CAPABILITY_H = cfgBool(false),
        .HAVE_SYS_MMAN_H = cfgBool(false),
        .HAVE_SYS_RANDOM_H = cfgBool(true),
        .HAVE_SYS_STAT_H = cfgBool(true),
        .HAVE_SYS_SYSCTL_H = cfgBool(false),
        .HAVE_SYS_TYPES_H = cfgBool(true),
        .HAVE_U16 = cfgBool(false),
        .HAVE_U32 = cfgBool(false),
        .HAVE_U64 = cfgBool(false),
        .HAVE_UINTPTR_T = cfgBool(true),
        .HAVE_UNISTD_H = cfgBool(true),
        .HAVE_USHORT = cfgBool(true),
        .HAVE_VLA = cfgBool(true),
        .HAVE_VPRINTF = cfgBool(true),
        .HAVE_W32CE_SYSTEM = cfgBool(false),
        .HAVE_W32_SYSTEM = cfgBool(false),
        .HAVE_WAIT4 = cfgBool(true),
        .HAVE_WAITPID = cfgBool(true),
        .HAVE_WCHAR_H = cfgBool(true),
        .IS_DEVELOPMENT_VERSION = cfgBool(false),
        .LIBGCRYPT_CIPHERS = "arcfour:blowfish:cast5:des:aes:twofish:serpent:rfc2268:seed:camellia:idea:salsa20:gost28147:chacha20:sm4:aria",
        .LIBGCRYPT_DIGESTS = "crc:gostr3411-94::md4:md5:rmd160:sha1:sha256:sha512:sha3:tiger:whirlpool:stribog:blake2:sm3",
        .LIBGCRYPT_KDFS = "s2k:pkdf2:scrypt",
        .LIBGCRYPT_PUBKEY_CIPHERS = "dsa:elgamal:rsa:ecc",
        .LT_OBJDIR = ".libs/",
        .NAME_OF_DEV_RANDOM = "/dev/random",
        .NAME_OF_DEV_URANDOM = "/dev/urandom",
        .PACKAGE = "libgcrypt",
        .PACKAGE_BUGREPORT = "https://bugs.gnupg.org",
        .PACKAGE_NAME = package_name,
        .PACKAGE_STRING = package_name ++ " " ++ package_version,
        .PACKAGE_TARNAME = package_name,
        .PACKAGE_URL = "",
        .PACKAGE_VERSION = package_version,
        .PRINTABLE_OS_NAME = "GNU/Linux",
        .SIZEOF_UINT64_T = 8,
        .SIZEOF_UNSIGNED_INT = t.c_type_byte_size(.uint),
        .SIZEOF_UNSIGNED_LONG = t.c_type_byte_size(.ulong),
        .SIZEOF_UNSIGNED_LONG_LONG = t.c_type_byte_size(.ulonglong),
        .SIZEOF_UNSIGNED_SHORT = t.c_type_byte_size(.ushort),
        .SIZEOF_UNSIGNED___INT128 = 16,
        .SIZEOF_VOID_P = t.ptrBitWidth() / 8,
        .STDC_HEADERS = cfgBool(true),
        .USE_AES = cfgBool(true),
        .USE_ARCFOUR = cfgBool(true),
        .USE_ARIA = cfgBool(true),
        .USE_BLAKE2 = cfgBool(true),
        .USE_BLOWFISH = cfgBool(true),
        .USE_CAMELLIA = cfgBool(true),
        .USE_CAPABILITIES = cfgBool(false),
        .USE_CAST5 = cfgBool(true),
        .USE_CHACHA20 = cfgBool(true),
        .USE_CRC = cfgBool(true),
        .USE_DES = cfgBool(true),
        .USE_DSA = cfgBool(true),
        .USE_ECC = cfgBool(true),
        .USE_ELGAMAL = cfgBool(true),
        .USE_GOST28147 = cfgBool(true),
        .USE_GOST_R_3411_12 = cfgBool(true),
        .USE_GOST_R_3411_94 = cfgBool(true),
        .USE_IDEA = cfgBool(true),
        .USE_MD2 = cfgBool(false),
        .USE_MD4 = cfgBool(true),
        .USE_MD5 = cfgBool(true),
        .USE_ONLY_8DOT3 = cfgBool(false),
        .USE_POSIX_SPAWN_FOR_TESTS = cfgBool(false),
        .USE_RFC2268 = cfgBool(true),
        .USE_RMD160 = cfgBool(true),
        .USE_RNDEGD = cfgBool(false),
        .USE_RNDGETENTROPY = cfgBool(true),
        .USE_RNDOLDLINUX = cfgBool(false),
        .USE_RNDUNIX = cfgBool(false),
        .USE_RNDW32 = cfgBool(false),
        .USE_RNDW32CE = cfgBool(false),
        .USE_RSA = cfgBool(true),
        .USE_SALSA20 = cfgBool(true),
        .USE_SCRYPT = cfgBool(true),
        .USE_SEED = cfgBool(true),
        .USE_SERPENT = cfgBool(true),
        .USE_SHA1 = cfgBool(true),
        .USE_SHA256 = cfgBool(true),
        .USE_SHA3 = cfgBool(true),
        .USE_SHA512 = cfgBool(true),
        .USE_SM3 = cfgBool(true),
        .USE_SM4 = cfgBool(true),
        ._ALL_SOURCE = cfgBool(true),
        ._MINIX = null,
        ._POSIX_SOURCE = null,
        ._POSIX_1_SOURCE = null,
        ._XOPEN_SOURCE = null,
        ._DARWIN_C_SOURCE = cfgBool(true),
        .__EXTENSIONS__ = cfgBool(true),
        ._GNU_SOURCE = cfgBool(true),
        ._HPUX_ALT_XOPEN_SOCKET_API = cfgBool(true),
        ._NETBSD_SOURCE = cfgBool(true),
        ._OPENBSD_SOURCE = cfgBool(true),
        ._POSIX_PTHREAD_SEMANTICS = cfgBool(true),
        .__STDC_WANT_IEC_60559_ATTRIBS_EXT__ = cfgBool(true),
        .__STDC_WANT_IEC_60559_BFP_EXT__ = cfgBool(true),
        .__STDC_WANT_IEC_60559_DFP_EXT__ = cfgBool(true),
        .__STDC_WANT_IEC_60559_FUNCS_EXT__ = cfgBool(true),
        .__STDC_WANT_IEC_60559_TYPES_EXT__ = cfgBool(true),
        .__STDC_WANT_LIB_EXT2__ = cfgBool(true),
        .__STDC_WANT_MATH_SPEC_FUNCS__ = cfgBool(true),
        ._TANDEM_SOURCE = cfgBool(true),
        .USE_TIGER = cfgBool(true),
        .USE_TWOFISH = cfgBool(true),
        .USE_WHIRLPOOL = cfgBool(true),
        .VERSION = package_version,
        .WITH_SYMBOL_UNDERSCORE = cfgBool(false),
        .WORDS_BIGENDIAN = null,
        .@"asm" = null,
        .@"const" = null,
        .@"inline" = null,
        .pid_t = null,
        .size_t = null,
        .uintptr_t = null,
    });
}
